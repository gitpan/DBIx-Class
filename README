DBIx::Class is Copyright (c) 2005-2014 by mst, castaway, ribasushi, and others.
See AUTHORS and LICENSE included with this distribution. All rights reserved.

NAME
    DBIx::Class - Extensible and flexible object <-> relational mapper.

WHERE TO START READING
    See DBIx::Class::Manual::DocMap for an overview of the exhaustive
    documentation. To get the most out of DBIx::Class with the least
    confusion it is strongly recommended to read (at the very least) the
    Manuals in the order presented there.

GETTING HELP/SUPPORT
    Due to the sheer size of its problem domain, DBIx::Class is a relatively
    complex framework. After you start using DBIx::Class questions will
    inevitably arise. If you are stuck with a problem or have doubts about a
    particular approach do not hesitate to contact us via any of the
    following options (the list is sorted by "fastest response time"):

    *   IRC: irc.perl.org#dbix-class

    *   Mailing list: <http://lists.scsys.co.uk/mailman/listinfo/dbix-class>

    *   RT Bug Tracker:
        <https://rt.cpan.org/NoAuth/Bugs.html?Dist=DBIx-Class>

    *   Twitter: <https://www.twitter.com/dbix_class>

    *   Web Site: <http://www.dbix-class.org/>

SYNOPSIS
    For the very impatient: DBIx::Class::Manual::QuickStart

    This code in the next step can be generated automatically from an
    existing database, see dbicdump from the distribution
    "DBIx-Class-Schema-Loader".

  Schema classes preparation
    Create a schema class called MyApp/Schema.pm:

      package MyApp::Schema;
      use base qw/DBIx::Class::Schema/;

      __PACKAGE__->load_namespaces();

      1;

    Create a result class to represent artists, who have many CDs, in
    MyApp/Schema/Result/Artist.pm:

    See DBIx::Class::ResultSource for docs on defining result classes.

      package MyApp::Schema::Result::Artist;
      use base qw/DBIx::Class::Core/;

      __PACKAGE__->table('artist');
      __PACKAGE__->add_columns(qw/ artistid name /);
      __PACKAGE__->set_primary_key('artistid');
      __PACKAGE__->has_many(cds => 'MyApp::Schema::Result::CD', 'artistid');

      1;

    A result class to represent a CD, which belongs to an artist, in
    MyApp/Schema/Result/CD.pm:

      package MyApp::Schema::Result::CD;
      use base qw/DBIx::Class::Core/;

      __PACKAGE__->load_components(qw/InflateColumn::DateTime/);
      __PACKAGE__->table('cd');
      __PACKAGE__->add_columns(qw/ cdid artistid title year /);
      __PACKAGE__->set_primary_key('cdid');
      __PACKAGE__->belongs_to(artist => 'MyApp::Schema::Result::Artist', 'artistid');

      1;

  API usage
    Then you can use these classes in your application's code:

      # Connect to your database.
      use MyApp::Schema;
      my $schema = MyApp::Schema->connect($dbi_dsn, $user, $pass, \%dbi_params);

      # Query for all artists and put them in an array,
      # or retrieve them as a result set object.
      # $schema->resultset returns a DBIx::Class::ResultSet
      my @all_artists = $schema->resultset('Artist')->all;
      my $all_artists_rs = $schema->resultset('Artist');

      # Output all artists names
      # $artist here is a DBIx::Class::Row, which has accessors
      # for all its columns. Rows are also subclasses of your Result class.
      foreach $artist (@all_artists) {
        print $artist->name, "\n";
      }

      # Create a result set to search for artists.
      # This does not query the DB.
      my $johns_rs = $schema->resultset('Artist')->search(
        # Build your WHERE using an SQL::Abstract structure:
        { name => { like => 'John%' } }
      );

      # Execute a joined query to get the cds.
      my @all_john_cds = $johns_rs->search_related('cds')->all;

      # Fetch the next available row.
      my $first_john = $johns_rs->next;

      # Specify ORDER BY on the query.
      my $first_john_cds_by_title_rs = $first_john->cds(
        undef,
        { order_by => 'title' }
      );

      # Create a result set that will fetch the artist data
      # at the same time as it fetches CDs, using only one query.
      my $millennium_cds_rs = $schema->resultset('CD')->search(
        { year => 2000 },
        { prefetch => 'artist' }
      );

      my $cd = $millennium_cds_rs->next; # SELECT ... FROM cds JOIN artists ...
      my $cd_artist_name = $cd->artist->name; # Already has the data so no 2nd query

      # new() makes a Result object but doesnt insert it into the DB.
      # create() is the same as new() then insert().
      my $new_cd = $schema->resultset('CD')->new({ title => 'Spoon' });
      $new_cd->artist($cd->artist);
      $new_cd->insert; # Auto-increment primary key filled in after INSERT
      $new_cd->title('Fork');

      $schema->txn_do(sub { $new_cd->update }); # Runs the update in a transaction

      # change the year of all the millennium CDs at once
      $millennium_cds_rs->update({ year => 2002 });

DESCRIPTION
    This is an SQL to OO mapper with an object API inspired by Class::DBI
    (with a compatibility layer as a springboard for porting) and a
    resultset API that allows abstract encapsulation of database operations.
    It aims to make representing queries in your code as perl-ish as
    possible while still providing access to as many of the capabilities of
    the database as possible, including retrieving related records from
    multiple tables in a single query, "JOIN", "LEFT JOIN", "COUNT",
    "DISTINCT", "GROUP BY", "ORDER BY" and "HAVING" support.

    DBIx::Class can handle multi-column primary and foreign keys, complex
    queries and database-level paging, and does its best to only query the
    database in order to return something you've directly asked for. If a
    resultset is used as an iterator it only fetches rows off the statement
    handle as requested in order to minimise memory usage. It has
    auto-increment support for SQLite, MySQL, PostgreSQL, Oracle, SQL Server
    and DB2 and is known to be used in production on at least the first
    four, and is fork- and thread-safe out of the box (although your DBD may
    not be).

    This project is still under rapid development, so large new features may
    be marked experimental - such APIs are still usable but may have edge
    bugs. Failing test cases are *always* welcome and point releases are put
    out rapidly as bugs are found and fixed.

    We do our best to maintain full backwards compatibility for published
    APIs, since DBIx::Class is used in production in many organisations, and
    even backwards incompatible changes to non-published APIs will be fixed
    if they're reported and doing so doesn't cost the codebase anything.

    The test suite is quite substantial, and several developer releases are
    generally made to CPAN before the branch for the next release is merged
    back to trunk for a major release.

HOW TO CONTRIBUTE
    Contributions are always welcome, in all usable forms (we especially
    welcome documentation improvements). The delivery methods include git-
    or unified-diff formatted patches, GitHub pull requests, or plain bug
    reports either via RT or the Mailing list. Contributors are generally
    granted access to the official repository after their first several
    patches pass successful review. Don't hesitate to contact either of the
    "CAT HERDERS" with any further questions you may have.

    This project is maintained in a git repository. The code and related
    tools are accessible at the following locations:

    *   Official repo: <git://git.shadowcat.co.uk/dbsrgits/DBIx-Class.git>

    *   Official gitweb:
        <http://git.shadowcat.co.uk/gitweb/gitweb.cgi?p=dbsrgits/DBIx-Class.
        git>

    *   GitHub mirror: <https://github.com/dbsrgits/DBIx-Class>

    *   Authorized committers:
        <ssh://dbsrgits@git.shadowcat.co.uk/DBIx-Class.git>

    *   Travis-CI log: <https://travis-ci.org/dbsrgits/dbix-class/builds>

AUTHORS
    Even though a large portion of the source *appears* to be written by
    just a handful of people, this library continues to remain a
    collaborative effort - perhaps one of the most successful such projects
    on CPAN <http://cpan.org>. It is important to remember that ideas do not
    always result in a direct code contribution, but deserve acknowledgement
    just the same. Time and time again the seemingly most insignificant
    questions and suggestions have been shown to catalyze monumental
    improvements in consistency, accuracy and performance.

    List of the awesome contributors who made DBIC v0.082801_01 possible

        abraxxa:Alexander Hartmaier <abraxxa@cpan.org>

        acca:Alexander Kuznetsov <acca@cpan.org>

        aherzog:Adam Herzog <adam@herzogdesigns.com>

        Alexander Keusch <cpan@keusch.at>

        alexrj:Alessandro Ranellucci <aar@cpan.org>

        alnewkirk:Al Newkirk <github@alnewkirk.com>

        amiri:Amiri Barksdale <amiribarksdale@gmail.com>

        amoore:Andrew Moore <amoore@cpan.org>

        Andrew Mehta <Andrew@unitedgames.co.uk>

        andrewalker:Andre Walker <andre@andrewalker.net>

        andyg:Andy Grundman <andy@hybridized.org>

        ank:Andres Kievsky <ank@ank.com.ar>

        arc:Aaron Crane <arc@cpan.org>

        arcanez:Justin Hunter <justin.d.hunter@gmail.com>

        ash:Ash Berlin <ash@cpan.org>

        bert:Norbert Csongrádi <bert@cpan.org>

        bfwg:Colin Newell <colin.newell@gmail.com>

        blblack:Brandon L. Black <blblack@gmail.com>

        bluefeet:Aran Deltac <bluefeet@cpan.org>

        boghead:Bryan Beeley <cpan@beeley.org>

        bphillips:Brian Phillips <bphillips@cpan.org>

        brd:Brad Davis <brd@FreeBSD.org>

        Brian Kirkbride <brian.kirkbride@deeperbydesign.com>

        bricas:Brian Cassidy <bricas@cpan.org>

        brunov:Bruno Vecchi <vecchi.b@gmail.com>

        caelum:Rafael Kitover <rkitover@cpan.org>

        caldrin:Maik Hentsche <maik.hentsche@amd.com>

        castaway:Jess Robinson <castaway@desert-island.me.uk>

        chorny:Alexandr Ciornii <alexchorny@gmail.com>

        claco:Christopher H. Laco <claco@cpan.org>

        clkao:CL Kao <clkao@clkao.org>

        Ctrl-O <http://ctrlo.com/>

        da5id:David Jack Olrik <david@olrik.dk>

        dams:Damien Krotkine <dams@cpan.org>

        dandv:Dan Dascalescu <ddascalescu+github@gmail.com>

        dariusj:Darius Jokilehto <dariusjokilehto@yahoo.co.uk>

        davewood:David Schmidt <mail@davidschmidt.at>

        daxim:Lars DÉªá´á´á´á´á´¡ è¿ªææ¯ <daxim@cpan.org>

        dduncan:Darren Duncan <darren@darrenduncan.net>

        debolaz:Anders Nor Berle <berle@cpan.org>

        dew:Dan Thomas <dan@godders.org>

        dim0xff:Dmitry Latin <dim0xff@gmail.com>

        dkubb:Dan Kubb <dan.kubb-cpan@onautopilot.com>

        dnm:Justin Wheeler <jwheeler@datademons.com>

        dpetrov:Dimitar Petrov <mitakaa@gmail.com>

        dsteinbrunner:David Steinbrunner <dsteinbrunner@pobox.com>

        duncan_dmg:Duncan Garland <Duncan.Garland@motortrak.com>

        dwc:Daniel Westermann-Clark <danieltwc@cpan.org>

        dyfrgi:Michael Leuchtenburg <michael@slashhome.org>

        edenc:Eden Cardim <edencardim@gmail.com>

        Eligo <http://eligo.co.uk/>

        ether:Karen Etheridge <ether@cpan.org>

        evdb:Edmund von der Burg <evdb@ecclestoad.co.uk>

        faxm0dem:Fabien Wernli <cpan@faxm0dem.org>

        felliott:Fitz Elliott <fitz.elliott@gmail.com>

        freetime:Bill Moseley <moseley@hank.org>

        frew:Arthur Axel "fREW" Schmidt <frioux@gmail.com>

        gbjk:Gareth Kirwan <gbjk@thermeon.com>

        Getty:Torsten Raudssus <torsten@raudss.us>

        goraxe:Gordon Irving <goraxe@cpan.org>

        gphat:Cory G Watson <gphat@cpan.org>

        Grant Street Group <http://www.grantstreet.com/>

        groditi:Guillermo Roditi <groditi@cpan.org>

        gshank:Gerda Shank <gshank@cpan.org>

        guacamole:Fred Steinberg <fred.steinberg@gmail.com>

        Haarg:Graham Knop <haarg@haarg.org>

        hobbs:Andrew Rodland <andrew@cleverdomain.org>

        Ian Wells <ijw@cack.org.uk>

        idn:Ian Norton <i.norton@shadowcat.co.uk>

        ilmari:Dagfinn Ilmari Mannsåker <ilmari@ilmari.org>

        initself:Mike Baas <mike@initselftech.com>

        ironcamel:Naveed Massjouni <naveedm9@gmail.com>

        jasonmay:Jason May <jason.a.may@gmail.com>

        jawnsy:Jonathan Yu <jawnsy@cpan.org>

        jegade:Jens Gassmann <jens.gassmann@atomix.de>

        jeneric:Eric A. Miller <emiller@cpan.org>

        jesper:Jesper Krogh <jesper@krogh.cc>

        Jesse Sheidlower <jester@panix.com>

        jgoulah:John Goulah <jgoulah@cpan.org>

        jguenther:Justin Guenther <jguenther@cpan.org>

        jhannah:Jay Hannah <jay@jays.net>

        jmac:Jason McIntosh <jmac@appleseed-sc.com>

        jmmills:Jason M. Mills <jmmills@cpan.org>

        jnapiorkowski:John Napiorkowski <jjn1056@yahoo.com>

        Joe Carlson <jwcarlson@lbl.gov>

        jon:Jon Schutz <jjschutz@cpan.org>

        Jordan Metzmeier <jmetzmeier@magazines.com>

        jshirley:J. Shirley <jshirley@gmail.com>

        kaare:Kaare Rasmussen

        kd:Kieren Diment <diment@gmail.com>

        konobi:Scott McWhirter <konobi@cpan.org>

        lejeunerenard:Sean Zellmer <sean@lejeunerenard.com>

        littlesavage:Alexey Illarionov <littlesavage@orionet.ru>

        lukes:Luke Saunders <luke.saunders@gmail.com>

        marcus:Marcus Ramberg <mramberg@cpan.org>

        mateu:Mateu X. Hunter <hunter@missoula.org>

        Matt LeBlanc <antirice@gmail.com>

        Matt Sickler <imMute@msk4.com>

        mattlaw:Matt Lawrence

        mattp:Matt Phillips <mattp@cpan.org>

        mdk:Mark Keating <m.keating@shadowcat.co.uk>

        melo:Pedro Melo <melo@simplicidade.org>

        metaperl:Terrence Brannon <metaperl@gmail.com>

        michaelr:Michael Reddick <michael.reddick@gmail.com>

        milki:Jonathan Chu <milki@rescomp.berkeley.edu>

        minty:Murray Walker <perl@minty.org>

        mithaldu:Christian Walde <walde.christian@gmail.com>

        mjemmeson:Michael Jemmeson <michael.jemmeson@gmail.com>

        mna:Maya

        mo:Moritz Onken <onken@netcubed.de>

        moltar:Roman Filippov <romanf@cpan.org>

        moritz:Moritz Lenz <moritz@faui2k3.org>

        mrf:Mike Francis <ungrim97@gmail.com>

        mst:Matt S. Trout <mst@shadowcat.co.uk>

        mstratman:Mark A. Stratman <stratman@gmail.com>

        ned:Neil de Carteret <n3dst4@gmail.com>

        nigel:Nigel Metheringham <nigelm@cpan.org>

        ningu:David Kamholz <dkamholz@cpan.org>

        Nniuq:Ron "Quinn" Straight" <quinnfazigu@gmail.org>

        norbi:Norbert Buchmuller <norbi@nix.hu>

        nothingmuch:Yuval Kogman <nothingmuch@woobling.org>

        nuba:Nuba Princigalli <nuba@cpan.org>

        Numa:Dan Sully <daniel@cpan.org>

        oalders:Olaf Alders <olaf@wundersolutions.com>

        Olly Betts <olly@survex.com>

        osfameron:Hakim Cassimally <osfameron@cpan.org>

        ovid:Curtis "Ovid" Poe <ovid@cpan.org>

        oyse:Øystein Torget <oystein.torget@dnv.com>

        paulm:Paul Makepeace <paulm+pause@paulm.com>

        penguin:K J Cheetham <jamie@shadowcatsystems.co.uk>

        perigrin:Chris Prather <chris@prather.org>

        Peter Siklósi <einon@einon.hu>

        Peter Valdemar Mørch <peter@morch.com>

        peter:Peter Collingbourne <peter@pcc.me.uk>

        phaylon:Robert Sedlacek <phaylon@dunkelheit.at>

        plu:Johannes Plunien <plu@cpan.org>

        Possum:Daniel LeWarne <possum@cpan.org>

        pplu:Jose Luis Martinez <jlmartinez@capside.com>

        quicksilver:Jules Bean <jules@jellybean.co.uk>

        racke:Stefan Hornburg <racke@linuxia.de>

        rafl:Florian Ragwitz <rafl@debian.org>

        rainboxx:Matthias Dietrich <perl@rb.ly>

        rbo:Robert Bohne <rbo@cpan.org>

        rbuels:Robert Buels <rmb32@cornell.edu>

        rdj:Ryan D Johnson <ryan@innerfence.com>

        Relequestual:Ben Hutton <relequestual@gmail.com>

        renormalist:Steffen Schwigon <schwigon@cpan.org>

        ribasushi:Peter Rabbitson <ribasushi@cpan.org>

        rjbs:Ricardo Signes <rjbs@cpan.org>

        Robert Krimen <rkrimen@cpan.org>

        Robert Olson <bob@rdolson.org>

        robkinyon:Rob Kinyon <rkinyon@cpan.org>

        Roman Ardern-Corris <spam_in@3legs.com>

        ruoso:Daniel Ruoso <daniel@ruoso.com>

        Sadrak:Felix Antonius Wilhelm Ostmann <sadrak@cpan.org>

        sc_:Just Another Perl Hacker

        schwern:Michael G Schwern <mschwern@cpan.org>

        Scott R. Godin <webdragon.net@gmail.com>

        scotty:Scotty Allen <scotty@scottyallen.com>

        semifor:Marc Mims <marc@questright.com>

        Simon Elliott <cpan@browsing.co.uk>

        SineSwiper:Brendan Byrd <perl@resonatorsoft.org>

        skaufman:Samuel Kaufman <sam@socialflow.com>

        solomon:Jared Johnson <jaredj@nmgi.com>

        spb:Stephen Bennett <stephen@freenode.net>

        Squeeks <squeek@cpan.org>

        srezic:Slaven Rezic <slaven@rezic.de>

        sszabo:Stephan Szabo <sszabo@bigpanda.com>

        Stephen Peters <steve@stephenpeters.me>

        stonecolddevin:Devin Austin <dhoss@cpan.org>

        talexb:Alex Beamish <talexb@gmail.com>

        tamias:Ronald J Kimball <rjk@tamias.net>

        TBSliver:Tom Bloor <t.bloor@shadowcat.co.uk>

        teejay:Aaron Trevena <teejay@cpan.org>

        theorbtwo:James Mastros <james@mastros.biz>

        Thomas Kratz <tomk@cpan.org>

        timbunce:Tim Bunce <tim.bunce@pobox.com>

        Todd Lipcon

        Tom Hukins <tom@eborcom.com>

        tommy:Tommy Butler <tbutler.cpan.org@internetalias.net>

        tonvoon:Ton Voon <ton.voon@opsview.com>

        triode:Pete Gamache <gamache@cpan.org>

        typester:Daisuke Murase <typester@cpan.org>

        uree:Oriol Soriano <oriol.soriano@capside.com>

        uwe:Uwe Voelker <uwe@uwevoelker.de>

        victori:Victor Igumnov <victori@cpan.org>

        wdh:Will Hawes <wdhawes@gmail.com>

        wesm:Wes Malone <wes@mitsi.com>

        willert:Sebastian Willert <willert@cpan.org>

        wintermute:Toby Corkindale <tjc@cpan.org>

        wreis:Wallace Reis <wreis@cpan.org>

        xenoterracide:Caleb Cushing <xenoterracide@gmail.com>

        yrlnry:Mark Jason Dominus <mjd@plover.com>

        zamolxes:Bogdan Lucaciu <bogdan@wiz.ro>

        Zefram:Andrew Main <zefram@fysh.org>

    The canonical source of authors and their details is the AUTHORS file at
    the root of this distribution (or repository). The canonical source of
    per-line authorship is the git repository history itself.

CAT HERDERS
    The fine folks nudging the project in a particular direction:

        ribasushi: Peter Rabbitson <ribasushi@cpan.org> (present day
        maintenance and controlled evolution)

        castaway: Jess Robinson <castaway@desert-island.me.uk> (lions share
        of the reference documentation and manuals)

        mst: Matt S Trout <mst@shadowcat.co.uk> (project founder - original
        idea, architecture and implementation)

COPYRIGHT AND LICENSE
    Copyright (c) 2005 by mst, castaway, ribasushi, and other DBIx::Class
    "AUTHORS" as listed above and in AUTHORS.

    This library is free software and may be distributed under the same
    terms as perl5 itself. See LICENSE for the complete licensing terms.

